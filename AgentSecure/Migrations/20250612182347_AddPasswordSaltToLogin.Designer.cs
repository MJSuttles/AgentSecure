// <auto-generated />
using AgentSecure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgentSecure.Migrations
{
    [DbContext(typeof(AgentSecureDbContext))]
    [Migration("20250612182347_AddPasswordSaltToLogin")]
    partial class AddPasswordSaltToLogin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgentSecure.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatName = "Theme Park"
                        },
                        new
                        {
                            Id = 2,
                            CatName = "Cruise"
                        },
                        new
                        {
                            Id = 3,
                            CatName = "Tour Operator"
                        },
                        new
                        {
                            Id = 4,
                            CatName = "Luxury Travel"
                        },
                        new
                        {
                            Id = 5,
                            CatName = "All-Inclusive"
                        },
                        new
                        {
                            Id = 6,
                            CatName = "Reseller"
                        });
                });

            modelBuilder.Entity("AgentSecure.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RegApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("TrainingComplete")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice.j@viking.com",
                            HashedPassword = "9VA/iVDzsQCGgzeG0Fw0RSlpaBlSamO9OzJzp0i79RE=",
                            PasswordSalt = "R5xj8P2gu8AJE0KPsiq8yg==",
                            RegApproved = true,
                            TrainingComplete = true,
                            UserId = 1,
                            Username = "alice.viking",
                            VendorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "alice.s@sandals.com",
                            HashedPassword = "CY8F8WQ8EYAbuZruzTaZDl+Nxu6bGqUXc4TY96hSbig=",
                            PasswordSalt = "I6xXQrwYNAqj4e4YiYO5Og==",
                            RegApproved = true,
                            TrainingComplete = false,
                            UserId = 1,
                            Username = "alice.sandals",
                            VendorId = 3
                        },
                        new
                        {
                            Id = 3,
                            Email = "alice.r@royal.com",
                            HashedPassword = "k1Kmt7JLjWqTit4xVRXIYyDy7iORMGiBbdDQw2VGQfQ=",
                            PasswordSalt = "D4+TXYlmXEBdUpjOLzW1Lg==",
                            RegApproved = false,
                            TrainingComplete = false,
                            UserId = 1,
                            Username = "alice.rccl",
                            VendorId = 5
                        },
                        new
                        {
                            Id = 4,
                            Email = "alice.a@applevacs.com",
                            HashedPassword = "uej4OJedlWTIj0aub04BORDZ8HBoV7/IDbE97TAFobY=",
                            PasswordSalt = "U+LP8KasPsSjPCZBFJ77DQ==",
                            RegApproved = true,
                            TrainingComplete = true,
                            UserId = 1,
                            Username = "alice.apple",
                            VendorId = 9
                        },
                        new
                        {
                            Id = 5,
                            Email = "alice.d@disney.com",
                            HashedPassword = "cPK/Sy7BpwyHs9dPA1T8U95aqknPjOrDJKDJ0ty1iLI=",
                            PasswordSalt = "EvsjXDl1dqQiXyPgjYe5Ng==",
                            RegApproved = true,
                            TrainingComplete = true,
                            UserId = 1,
                            Username = "alice.disney",
                            VendorId = 4
                        },
                        new
                        {
                            Id = 6,
                            Email = "bob.d@delta.com",
                            HashedPassword = "R83FOc1CdKqW8XaXxxdRFOdMwylwr1Ceqk7wDKpgDxA=",
                            PasswordSalt = "VZ/gjVqFNCGwU52AEgkrBg==",
                            RegApproved = true,
                            TrainingComplete = false,
                            UserId = 2,
                            Username = "bob.delta",
                            VendorId = 2
                        },
                        new
                        {
                            Id = 7,
                            Email = "bob.g@globus.com",
                            HashedPassword = "qUjlK+Rd7puN4WpSBWgF15RCEAKsgou7Xu/Yr9fCt7g=",
                            PasswordSalt = "3REpqxWqz1Z40FixY4wqww==",
                            RegApproved = false,
                            TrainingComplete = false,
                            UserId = 2,
                            Username = "bob.globus",
                            VendorId = 6
                        },
                        new
                        {
                            Id = 8,
                            Email = "bob.t@ti.com",
                            HashedPassword = "q7mwv8gP6geiDjIrKeUi7Zzg8SxP3mdw7NVmiHwzIRg=",
                            PasswordSalt = "GwQJtcq1mKzAZhLg6gun9Q==",
                            RegApproved = true,
                            TrainingComplete = true,
                            UserId = 2,
                            Username = "bob.ti",
                            VendorId = 7
                        },
                        new
                        {
                            Id = 9,
                            Email = "bob.e@expedia.com",
                            HashedPassword = "wqes201ndwzAYeiUGNzze1dR8c3o3bL+sk+PV+AgSS0=",
                            PasswordSalt = "N5WevqxTGApq/mhPUy0yxA==",
                            RegApproved = true,
                            TrainingComplete = false,
                            UserId = 2,
                            Username = "bob.expedia",
                            VendorId = 8
                        },
                        new
                        {
                            Id = 10,
                            Email = "bob.a@amr.com",
                            HashedPassword = "AF+EGXI5FTlYEYOJnaHnAZxe3sClHhhF+I0mg4ki9/U=",
                            PasswordSalt = "gwF0lFnI4pxLYUO1VxGO3w==",
                            RegApproved = true,
                            TrainingComplete = true,
                            UserId = 2,
                            Username = "bob.amresorts",
                            VendorId = 10
                        });
                });

            modelBuilder.Entity("AgentSecure.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Nashville",
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Phone = "555-123-4567",
                            State = "TN",
                            StreetAddress = "123 Elm Street",
                            Uid = "-Nabc123XYZ7890user1",
                            Zip = "37201"
                        },
                        new
                        {
                            Id = 2,
                            City = "Atlanta",
                            Email = "bob.martinez@example.com",
                            FirstName = "Bob",
                            LastName = "Martinez",
                            Phone = "555-987-6543",
                            State = "GA",
                            StreetAddress = "456 Oak Avenue",
                            Uid = "-Ndef456LMN4567user2",
                            Zip = "30301"
                        });
                });

            modelBuilder.Entity("AgentSecure.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Consortium")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoginWebsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Consortium = "",
                            Description = "Luxury river and ocean cruise line known for cultural experiences.",
                            LoginWebsite = "https://www.vikingtravelagents.com",
                            Name = "Viking Cruises",
                            Phone = "800-706-1483",
                            Website = "https://www.vikingcruises.com"
                        },
                        new
                        {
                            Id = 2,
                            Consortium = "VAX Vacation Access",
                            Description = "Air and hotel vacation packages powered by Delta Air Lines.",
                            LoginWebsite = "www.vaxvacationaccess.com",
                            Name = "Delta Vacations",
                            Phone = "800-727-1111",
                            Website = "https://www.delta.com/vacations"
                        },
                        new
                        {
                            Id = 3,
                            Consortium = "",
                            Description = "All-inclusive Caribbean resorts for couples.",
                            LoginWebsite = "https://taportal.sandals.com",
                            Name = "Sandals Resorts",
                            Phone = "888-726-3257",
                            Website = "https://www.sandals.com"
                        },
                        new
                        {
                            Id = 4,
                            Consortium = "",
                            Description = "Booking site and resources for Disney Destinations travel professionals.",
                            LoginWebsite = "https://www.disneytravelagents.com",
                            Name = "Disney Travel Agents",
                            Phone = "877-569-3276",
                            Website = "https://www.disneytravelagents.com"
                        },
                        new
                        {
                            Id = 5,
                            Consortium = "Cruising Power",
                            Description = "Popular cruise line with innovative ships and global destinations.",
                            LoginWebsite = "https://www.cruisingpower.com",
                            Name = "Royal Caribbean",
                            Phone = "800-327-2056",
                            Website = "https://www.royalcaribbean.com"
                        },
                        new
                        {
                            Id = 6,
                            Consortium = "",
                            Description = "Tour operator offering guided land tours and independent travel.",
                            LoginWebsite = "https://www.globusfamily.com/TravelAgents",
                            Name = "Globus Family of Brands",
                            Phone = "866-755-8581",
                            Website = "https://www.globusjourneys.com"
                        },
                        new
                        {
                            Id = 7,
                            Consortium = "",
                            Description = "Luxury vacation wholesaler with access to top resorts worldwide.",
                            LoginWebsite = "https://www.vaxvacationaccess.com",
                            Name = "Travel Impressions",
                            Phone = "800-284-0044",
                            Website = "https://www.travelimpressions.com"
                        },
                        new
                        {
                            Id = 8,
                            Consortium = "",
                            Description = "Travel agent affiliate program offering hotels, flights, and packages.",
                            LoginWebsite = "https://www.expediataap.com",
                            Name = "Expedia TAAP",
                            Phone = "866-310-5768",
                            Website = "https://www.expedia.com"
                        },
                        new
                        {
                            Id = 9,
                            Consortium = "VAX Vacation Access",
                            Description = "U.S. tour operator known for beach vacations and charter flights.",
                            LoginWebsite = "https://www.vaxvacationaccess.com",
                            Name = "Apple Vacations",
                            Phone = "800-517-2000",
                            Website = "https://www.applevacations.com"
                        },
                        new
                        {
                            Id = 10,
                            Consortium = "",
                            Description = "Collection of luxury resort brands in Mexico and the Caribbean.",
                            LoginWebsite = "https://www.amragents.com",
                            Name = "AmResorts",
                            Phone = "866-847-8184",
                            Website = "https://www.amrcollection.com"
                        });
                });

            modelBuilder.Entity("AgentSecure.Models.VendorCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            VendorId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            VendorId = 3
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            VendorId = 3
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            VendorId = 4
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            VendorId = 5
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            VendorId = 6
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 6,
                            VendorId = 7
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            VendorId = 7
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            VendorId = 8
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            VendorId = 9
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 6,
                            VendorId = 10
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            VendorId = 10
                        });
                });

            modelBuilder.Entity("AgentSecure.Models.Login", b =>
                {
                    b.HasOne("AgentSecure.Models.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentSecure.Models.Vendor", "Vendor")
                        .WithMany("Logins")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AgentSecure.Models.VendorCategory", b =>
                {
                    b.HasOne("AgentSecure.Models.Category", "Category")
                        .WithMany("VendorCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentSecure.Models.Vendor", "Vendor")
                        .WithMany("VendorCategories")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AgentSecure.Models.Category", b =>
                {
                    b.Navigation("VendorCategories");
                });

            modelBuilder.Entity("AgentSecure.Models.User", b =>
                {
                    b.Navigation("Logins");
                });

            modelBuilder.Entity("AgentSecure.Models.Vendor", b =>
                {
                    b.Navigation("Logins");

                    b.Navigation("VendorCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
